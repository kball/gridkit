@import 'gridkit/flex';
@import 'gridkit/context';

@mixin grid() {
  display: flex;
  flex-flow: row;
  flex-wrap: wrap;
  @if ($use-grid) {
    @supports(display: grid) {
      display: grid;
    }
  }
}

@mixin grid-gap($gap) {
  $grid-context: gridkit-update-context((gap: $gap));
  @if ($use-grid) {
    grid-gap: $gap;
    @supports not (display: grid) {
      @include flex-grid-gap();
    }
    @if ($ie-fallback) {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
        @include flex-grid-gap();
      }
    }
  } @else {
    @include flex-grid-gap();
  }
}


@mixin grid-template-columns($columns) {
  $grid-context: gridkit-update-context((columns: $columns));
  @if ($use-grid) {
    grid-template-columns: #{$columns};
    @supports not (display: grid) {
      @include flex-default-columns();
    }
    @if ($ie-fallback) {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
        @include flex-default-columns();
      }
    }
  } @else {
    @include flex-default-columns();
  }
}

@mixin grid-template-rows($rows) {
  $grid-context: gridkit-update-context((rows: $rows));
  @if ($use-grid) {
    grid-template-rows: #{$rows};

    @supports not (display: grid) {
      @include flex-default-rows();
    }
    @if ($ie-fallback) {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
        @include flex-default-rows();
      }
    }
  } @else {
    @include flex-default-rows();
  }

}

@mixin grid-template-areas($areas) {
  $grid-context: gridkit-update-context((areas: $areas));
  @if ($use-grid) {
    grid-template-areas: $areas;
  }
}

@mixin -grid-area($area) {
  @if ($use-grid) {
    @supports(display: grid) {
      grid-area: $area;
    }
    @supports not (display: grid) {
      @include flex-computed-area($area);
      @include flex-computed-margin();
    }
    @if ($ie-fallback) {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
        @include flex-computed-area($area);
        @include flex-computed-margin();
      }
    }
  } @else {
    @include flex-computed-area($area);
    @include flex-computed-margin();
  }

}

/// if include-all-contexts is true (default) this will iterate through media queries and
/// make them "just work". This is default true because "true" grid only needs to set media
/// on parent and it will impact areas automatically.
@mixin grid-area($area, $include-all-contexts: true) {
  @if $-gridkit-current-context == base && $include-all-contexts {
    @include gridkit-each-context {
      @include -grid-area($area);
    }
  } @else {
    @include -grid-area($area);
  }
}
