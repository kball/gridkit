@import 'gridkit/context';
@function -flex-width-string($key) {
  @return -flex-calc-str($key, widths);
}

@function -flex-minwidth-string($key) {
  @if -flex-needs-min(columns) {
    @return -flex-calc-str($key, widths, false);
  } @else {
    @return auto;
  }
}

@function -flex-height-string($key) {
  @return -flex-calc-str($key, heights);
}

@function -flex-minheight-string($key) {
  @if -flex-needs-min(rows) {
    @return -flex-calc-str($key, heights, false);
  } @else {
    @return auto;
  }
}

@function -flex-needs-min($type) {
  $gridkit-context: gridkit-current-context();
  $values: map-get-key($gridkit-context, $type);
  @return -gk-has-minmax($values);
}


// $type should be widths or heights
@function -flex-calc-str($key, $type, $use-max: true) {
  $map: get-annotated-areas-map($use-max);
  $area: map-get($map, $key);
  $values: map-get($area, $type);
  $x-gap: 0px;
  $gridkit-context: map-merge(gridkit-base-context(), gridkit-current-context());
  @if map-has-key($gridkit-context, gap) {
    $x-gap: -gk-get-x(map-get($gridkit-context, gap));
  }

  $str: 'calc(' + nth($values, 1);
  @if (length($values) > 1) {
    @for $i from 2 through length($values) {
      $str: '#{$str} + #{nth($values, $i)}'
    }
  }
  $str: $str + ' - #{$x-gap})';
  @return $str;
}

@mixin flex-computed-margin() {
  $gridkit-context: map-merge(gridkit-base-context(), gridkit-current-context());
  @if map-has-key($gridkit-context, gap) {
    $gap: map-get($gridkit-context, gap);
    $x: -gk-get-x($gap) / 2;
    $y: -gk-get-y($gap) / 2;
    margin: $y $x;
  }
}

@mixin flex-grid-gap() {
  > * {
    @include flex-computed-margin();
  }
}

@mixin flex-computed-area($area) {
  flex: 0 1 auto;
  width: #{-flex-width-string($area)};
  min-width: #{-flex-minwidth-string($area)};
  height: #{-flex-height-string($area)};
  min-height: #{-flex-minheight-string($area)};
}

@mixin flex-default-columns() {
  $needs-min: -flex-needs-min(columns);
  $widths: -gk-get-column-widths();
  $maxwidth: "0px";
  $minwidths: ();
  $len: length($widths);
  @if ($needs-min) {
    $minwidths: -gk-get-column-minwidths();
  }
  > * {
    flex: 0 1 auto;
    box-sizing: border-box;
  }
  @for $i from 1 through $len {
    $width: nth($widths, $i);
    $maxwidth: "#{$maxwidth} + #{$width}";
    > :nth-child(#{$i}n) {
      width: #{$width};
      @if ($needs-min) {
        min-width: #{nth($minwidths, $i)};
      }
    }
  }

  $gridkit-context: map-merge(gridkit-base-context(), gridkit-current-context());
  @if map-has-key($gridkit-context, gap) {
    $x-gap: -gk-get-x(map-get($gridkit-context, gap));
    $maxwidth: "#{$maxwidth} + (#{$len} * #{$x-gap})";
  }
  > :nth-child(#{$len}n) {
    margin-right: calc(100% - (#{$maxwidth}));
  }
}

@mixin flex-default-rows() {
  // todo
}
