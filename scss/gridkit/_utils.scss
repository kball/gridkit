@import 'gridkit/context';

/// In order to be compatible across grid and flex we need to translate repeats
/// into explicit
/// TODO: Change this to an explicit transformation via strings for flexbox etc so
/// it doesn't change the output grid code.
@function repeat($count, $val) {
  $str: $val;
  @for $i from 2 through $count {
    $str: $str + " " + $val;
  }
  @return $str;
}

/// Started from https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass
/// modified to allow multiple contiguous separators

/// @access private
///
/// @param {String} $string - String to separate.
/// @param {String} $separator - String to use as separator.
///
/// @returns {List} A list of substrings separated by the separator

@function -gk-str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);

        @if (str-length($item) > 0) {
          // push item to array
          $split-arr: append($split-arr, $item);
        }
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

/// @access private
///
/// @param {List} $val - Set of either single (x&y) or double (x y) values.
/// @param {Number} $offset - Whether you'd like x (1) or y (2) value

/// @returns {Number} The value you asked for, either x or y
@function -gk-get-xy-val($val, $offset) {
  @if length($val) == 1 {
    @return $val;
  } @else {
    @return nth($val, $offset);
  }
}
/// @access private
///
/// @param {List} $val - Set of either single (x&y) or double (x y) values.
///
/// @returns {Number} The x value
@function -gk-get-x($val) {
  @return -gk-get-xy-val($val, 1);
}

/// @access private
///
/// @param {List} $val - Set of either single (x&y) or double (x y) values.
///
/// @returns {Number} The y value
@function -gk-get-y($val) {
  @return -gk-get-xy-val($val, 2);
}

/// @access private
///
/// @param {Number} $value - A CSS value that we want to check for 'fr' unit.
///
/// @returns {boolean} If the unit is 'fr'
@function -gk-is-fr($value) {
  @return (str-index(inspect($value), 'fr') != null);
}

/// @access private
///
/// @param {Mixed} $str - A CSS value or string of value that we want to see if it has 'minmax' in it
///
/// @returns {boolean} If the value has 'minmax' in it.
@function -gk-has-minmax($str) {
  @return (str-index(inspect($str), ' minmax') != null);
}

/// Replaces minmax with the larger value. Used to set height or width
/// For now only handles simple (non-nested) minmax. TODO: Make more robust
@function -gk-maxval-minmax($str) {
  $str: inspect($str);
  $new-str: '';
  $idx: str-index($str, ' minmax');
  @while ($idx != null) {
    $new-str: $new-str + str-slice($str, 1, $idx - 1);
    $str: str-slice($str, $idx + str-length(' minmax') + 1); // cut minmax and paren
    $comma-idx: str-index($str, ',');
    $str: str-slice($str, $comma-idx + 1); // cut first value and comma
    $close-idx: str-index($str, ')');
    $new-str: $new-str + str-slice($str, 1, $close-idx - 1);
    $str: str-slice($str, $close-idx + 1);
    $idx: str-index($str, ' minmax');
  }
  $new-str: $new-str + $str;
  @return $new-str;
}

/// Replaces minmax with the smaller value. Used to set min-height
/// For now only handles simple (non-nested) minmax. TODO: Make more robust
@function -gk-minval-minmax($str) {
  $str: inspect($str);
  $new-str: '';
  $idx: str-index($str, ' minmax');
  @while ($idx != null) {
    $new-str: $new-str + str-slice($str, 1, $idx);
    $str: str-slice($str, $idx + str-length(' minmax') + 1); // cut minmax and paren
    $comma-idx: str-index($str, ',');
    $new-str: $new-str + str-slice($str, 1, $comma-idx - 1); // cut first value and comma
    $close-idx: str-index($str, ')');
    $str: str-slice($str, $close-idx + 1);
    $idx: str-index($str, ' minmax');
  }
  $new-str: $new-str + $str;

  @return $new-str;
}

@function gridkit-maxout-grid($grid-value) {
  $strval: inspect($grid-value);
  $strval: -gk-maxval-minmax($strval);
  @return #{$strval};
}

// $direction should be either columns or rows
@function -gk-translate-fr($value, $direction, $use-max) {
  @if (-gk-is-fr($value)) {
    $gridkit-context: gridkit-current-context();
    $vals: map-get($gridkit-context, $direction);
    @if $use-max {
      $vals: -gk-str-split(-gk-maxval-minmax($vals), ' ');
    } @else {
      $vals: -gk-str-split(-gk-minval-minmax($vals), ' ');
    }
    $numFrs: 0;
    $calcStr: '(0px';
    @for $i from 1 through length($vals) {
      $val: nth($vals, $i);
      @if (-gk-is-fr($val)) {
        $numFrs: $numFrs + 1;
      } @else {
        $calcStr: '#{$calcStr} + #{$val}';
      }
    }
    $calcStr: '#{$calcStr})';
    $fr-value: '';
    @if ($numFrs == length($vals)) {
      $fr-value: 100% / $numFrs;
    } @else {
      $fr-value: '((100% - #{$calcStr}) / #{$numFrs})';
    }
    $val: nth(-gk-str-split($value, 'fr'), 1);
    @return '(#{$val} * #{$fr-value})';
  } @else {
    @return $value;
  }
}
@function -gk-column-widths($use-max) {
  $gridkit-context: gridkit-current-context();
  $columns: map-get($gridkit-context, columns);
  $widths: ();
  @if ($use-max) {
    $columns: -gk-str-split(-gk-maxval-minmax($columns), ' ');
  } @else {
    $columns: -gk-str-split(-gk-minval-minmax($columns), ' ');
  }
  @for $i from 1 through length($columns) {
    $width: -gk-translate-fr(nth($columns, $i), columns, $use-max);
    $widths: append($widths, $width);
  }
  @return $widths;
}

@function -gk-get-column-widths() {
  @return -gk-column-widths($use-max: true);
}

@function -gk-get-column-minwidths() {
  @return -gk-column-widths($use-max: false);
}

@function get-areas-matrix {
  $areas: map-get(gridkit-current-context(), areas);
  $matrix: ();
  @for $i from 1 through length($areas) {
    $matrix: append($matrix, -gk-str-split(nth($areas, $i), " "));
  }
  @return $matrix;
}

@function update-area-map($map, $area, $x, $y) {
  $obj: (min-x: 9999999, min-y: 9999999, max-x: 0, max-y: 0);
  @if map-has-key($map, $area) {
    $obj: map-get($map, $area);
  }

  $min-x: min(map-get($obj, min-x), $x);
  $min-y: min(map-get($obj, min-y), $y);
  $max-x: max(map-get($obj, max-x), $x);
  $max-y: max(map-get($obj, max-y), $y);
  @return map-merge($map, ($area: (min-x: $min-x, min-y: $min-y, max-x: $max-x, max-y: $max-y)))
}

@function get-areas-map {
  $matrix: get-areas-matrix();
  $map: ();
  @for $y from 1 through length($matrix) {
    $row: nth($matrix, $y);
    @for $x from 1 through length($row) {
      $area: nth($row, $x);
      $map: update-area-map($map, $area, $x, $y);
    }
  }
  @return $map;
}

@function annotate-areas-map($map, $use-max: true) {
  $gridkit-context: gridkit-current-context();
  $columns: map-get($gridkit-context, columns);
  $rows:    map-get($gridkit-context, rows);

  // Normalize to max value or min value from minmax
  @if $use-max {
    $columns: -gk-maxval-minmax($columns);
    $rows: -gk-maxval-minmax($rows);
  } @else {
    $columns: -gk-minval-minmax($columns);
    $rows: -gk-minval-minmax($rows);
  }

  $columns: -gk-str-split($columns, ' ');
  $rows: -gk-str-split($rows, ' ');

  $areas: map-keys($map);
  @for $i from 1 through length($areas) {
    $key: nth($areas, $i);
    $area: map-get($map, $key);
    $widths: ();
    $heights: ();

    //TODO: Deal with auto (non explicit);
    @for $col from map-get($area, min-x) through map-get($area, max-x) {
      $width: auto;
      @if(length($columns) >= $col) {
        $width: -gk-translate-fr(nth($columns, $col), columns, $use-max);
      }
      $widths: append($widths, $width);
    }
    @for $row from map-get($area, min-y) through map-get($area, max-y) {
      $height: auto;
      @if(length($rows) >= $row) {
        $height: -gk-translate-fr(nth($rows, $row), rows, $use-max);
      }
      $heights: append($heights, $height);
    }
    $area: map-merge($area, (widths: $widths, heights: $heights));
    $map: map-merge($map, ($key: $area));
  }
  @return $map;
}

@function get-annotated-areas-map($use-max: true) {
  $map: get-areas-map();
  @return annotate-areas-map($map, $use-max);
}

// TODO: Figure out if we can get caching working. right now its not playing nicely with contexts
@function cached-areas-map {
  $gridkit-context: map-merge(gridkit-base-context(), gridkit-current-context());
  @if map-has-key($gridkit-context, areas-map) {
    @return map-get($gridkit-context, areas-map);
  } @else {
    $gridkit-context: gridkit-update-context((areas-map: get-annotated-areas-map()));
    @return map-get($gridkit-context, areas-map);
  }
}
